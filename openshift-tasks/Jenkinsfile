#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) 
{
  node('skopeo-pod') {
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    stage('Checkout Source') {
      checkout scm
    }
    // Build the Tasks Service
    dir('openshift-tasks') {
      // def version = getVersionFromPom("pom.xml")
      def pom = readMavenPom file: 'pom.xml'
      def version = pom.version

      def devTag  = "${version}-${BUILD_NUMBER}"
      def prodTag = "${version}"

      def devProject="${GUID}-tasks-dev"
      def prodProject="${GUID}-tasks-prod"
      
      // Using Maven build the war file
      stage('Build War File') {
        steps {
          echo "Building version ${devTag}"
            sh "${mvnCmd} clean package -DskipTests=true"
        }
      }

      // Using Maven run the unit tests
      stage('Unit Tests & Code Analysis') {
        failFast true
        parallel{
          stage('Unit Tests') {
            steps {
              echo "Running Unit Tests"
              sh "${mvnCmd} test"
            }
          }
          stage('Code Analysis') {
            steps {
              echo "Running Code Analysis"
              sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000/ -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}"
            }
          }
        }
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        steps {
          echo "Publish to Nexus"
            sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
        }
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        steps {
          echo "Building OpenShift container image tasks:${devTag}"

          script {
            openshift.withCluster() {
              openshift.withProject("${devProject}") {
              openshift.selector("bc", "tasks").startBuild("--from-file=./target/openshift-tasks.war", "--wait=true")
              openshift.tag("tasks:latest", "tasks:${devTag}")
              }
            }
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        steps {
          echo "Deploy container image to Development Project"

          script {
            openshift.withCluster() {
              openshift.withProject("${devProject}") {
              openshift.set("image", "dc/tasks", "tasks=image-registry.openshift-image-registry.svc:5000/${devProject}/tasks:${devTag}")

              openshift.selector('configmap', 'tasks-config').delete()
              def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties' )

              openshift.selector("dc", "tasks").rollout().latest();

              def dc = openshift.selector("dc", "tasks").object()
              def dc_version = dc.status.latestVersion
              def rc = openshift.selector("rc", "tasks-${dc_version}").object()

              echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
                while (rc.spec.replicas != rc.status.readyReplicas) {
                    sleep 5
                    rc = openshift.selector("rc", "tasks-${dc_version}").object()
                }
              }
            }
          }
        }
      }

      // Copy Image to Nexus Docker Registry
      stage('Copy Image to Nexus Docker Registry') {
        steps {
          echo "Copy image to Nexus Docker Registry"

          script {
            sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${devProject}/tasks:${devTag} docker://nexus3-registry.gpte-hw-cicd.svc.cluster.local:5000/${prefix}/tasks:${devTag}"

            openshift.withCluster() {
              openshift.withProject("${prodProject}") {
                openshift.tag("${devProject}/tasks:${devTag}", "${devProject}/tasks:${prodTag}")
              }
            }
          }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      // Do not activate the new version yet.
      stage('Blue/Green Production Deployment') {
        steps {
          echo "Blue/Green Deployment"

          script {
            openshift.withCluster() {
              openshift.withProject("${prodProject}") {
                activeApp = openshift.selector("route", "tasks").object().spec.to.name
                if (activeApp == "tasks-green") {
                  destApp = "tasks-blue"
                }
                echo "Active Application:      " + activeApp
                echo "Destination Application: " + destApp

                // Update the Image on the Production Deployment Config
                def dc = openshift.selector("dc/${destApp}").object()

                // OpenShift 4
                dc.spec.template.spec.containers[0].image="image-registry.openshift-image-registry.svc:5000/${devProject}/tasks:${prodTag}"
                // OpenShift 3
                // dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${devProject}/tasks:${prodTag}"

                openshift.apply(dc)

                // Update Config Map in change config files changed in the source
                openshift.selector("configmap", "${destApp}-config").delete()
                def configmap = openshift.create("configmap", "${destApp}-config", "--from-file=./configuration/application-users.properties", "--from-file=./configuration/application-roles.properties" )

                // Deploy the inactive application.
                openshift.selector("dc", "${destApp}").rollout().latest();

                // Wait for application to be deployed
                def dc_prod = openshift.selector("dc", "${destApp}").object()
                def dc_version = dc_prod.status.latestVersion
                def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
                echo "Waiting for ${destApp} to be ready"
                while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
                  sleep 5
                  rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
                }
              }
            }
          }
        }
      }

      stage('Switch over to new Version') {
        steps {
          echo "Executing production switch"
          // TBD: After approval execute the switch
          script {
            openshift.withCluster() {
              openshift.withProject("${prodProject}") {
                def route = openshift.selector("route/tasks").object()
                route.spec.to.name="${destApp}"
                openshift.apply(route)
              }
            }
          }
        }
      }
    }
  }
}